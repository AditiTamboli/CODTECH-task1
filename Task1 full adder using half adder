//Full Adder Using Half adder
// Half Adder Module
module half_adder (
    input a,
    input b,
    output sum,
    output carry
);
    assign sum = a ^ b;     // XOR for sum
    assign carry = a & b;   // AND for carry
endmodule

// Full Adder Module using two Half Adders
module full_adder (
    input a,
    input b,
    input cin,
    output sum,
    output cout
);
    wire sum1, carry1, carry2;

    // Instantiate first half adder
    half_adder ha1 (
        .a(a),
        .b(b),
        .sum(sum1),
        .carry(carry1)
    );

    // Instantiate second half adder
    half_adder ha2 (
        .a(sum1),
        .b(cin),
        .sum(sum),
        .carry(carry2)
    );

    // OR gate for final carry output
    assign cout = carry1 | carry2;
endmodule


//TestBench code of Full Adder
module tb_full_adder;
    // Inputs
    reg a;
    reg b;
    reg cin;

    // Outputs
    wire sum;
    wire cout;

    // Instantiate the Full Adder module
    full_adder uut (
        .a(a),
        .b(b),
        .cin(cin),
        .sum(sum),
        .cout(cout)
    );

    initial begin
      $dumpfile("test.vcd");
      $dumpvars(1);
      
        // Initialize Inputs
        a = 0; b = 0; cin = 0;
        #10; // Wait 10 time units
        a = 0; b = 0; cin = 1;
        #10;
        a = 0; b = 1; cin = 0;
        #10;
        a = 0; b = 1; cin = 1;
        #10;
        a = 1; b = 0; cin = 0;
        #10;
        a = 1; b = 0; cin = 1;
        #10;
        a = 1; b = 1; cin = 0;
        #10;
        a = 1; b = 1; cin = 1;
        #10;
        $finish; // Stop the simulation
    end
endmodule


     
     
      
